{
	"features": [
		//  Problem #1 - you should be able to pick docker-in-docker or docker-from-docker, but not both, and settings need to be different
		{
			"id": "docker-in-docker",
			"name": "Docker (Moby) CLI and Engine in container",
			"type": "option",
			"default": false,
			"buildArg": "INSTALL_DIND",
			"entrypoint": "/usr/local/share/docker-init.sh",
			"privileged": true,
			"extensions": [
				"ms-azuretools.vscode-docker"
			],
			"mounts": [
				"source=dind-var-lib-docker,target=/var/lib/docker,type=volume"
			]
		},
		{
			"id": "docker-from-docker",
			"name": "Docker (Moby) CLI, but reuse local Docker Engine",
			"type": "option",
			"default": false,
			"buildArg": "INSTALL_DOCKER_FROM_DOCKER",
			"entrypoint": "/usr/local/share/docker-init.sh",
			"extensions": [
				"ms-azuretools.vscode-docker"
			],
			"mounts": [
				"source=/var/run/docker.sock,target=/var/run/docker-host.sock,type=bind"
			]
		},
		//  Problem area #1 - there's three versions here and they go together as a unit, and no ability to pin to a version
		{
			"id": "kubectl-helm-minikube",
			"name": "latest kubectl, Helm, and minkube",
			"type": "option",
			"default": false,
			"buildArg": "INSTALL_KUBE",
			"extensions": [
				"ms-kubernetes-tools.vscode-kubernetes-tools"
			]
		},
		//  Problem area #2 - Terraform also involves three versions here and they go together as a unit, and no ability to pin to a version
		{
			"id": "terraform",
			"name": "latest Terraform, tflint, and TFGrunt CLIs",
			"type": "option",
			"default": false,
			"buildArg": "INSTALL_KUBE",
			"extensions": [
				"HashiCorp.terraform"
			]
		},
		{
			"id": "git",
			"name": "latest version of Git (may require a build)",
			"default": false,
			"buildArg": "INSTALL_GIT"
		},
		{
			"id": "git-lfs",
			"name": "Git Large File Support (LFS)",
			"default": false,
			"buildArg": "INSTALL_GIT_LFS"
		},
		{
			"id": "github-cli",
			"name": "GitHub CLI",
			"type": "option",
			"default": false,
			"buildArg": "INSTALL_GITHUB_CLI"
		},
		{
			"id": "azure-cli",
			"name": "Azure CLI",
			"type": "option",
			"default": false,
			"buildArg": "INSTALL_AZURE_CLI"
		},
		{
			"id": "sshd",
			"name": "SSH server",
			"type": "option",
			"default": false,
			"buildArg": "INSTALL_SSH"
		},
		{
			"id": "node",
			"name": "Node.js (via NVM) and yarn",
			"type": "choice",
			"values": ["latest", "lts/*", "16", "14", "12"],
			"default": false,
			"buildArg": "NODE_VERSION",
			"extensions": ["dbaeumer.vscode-eslint"],
			"containerEnv": {
				"NVM_DIR":"/usr/local/share/nvm",
				"NVM_SYMLINK_CURRENT": true,
				"PATH": "${NVM_DIR}/current/bin:${PATH}"
			}
		},
		{
			"id": "python",
			"name": "Python (requires a long build) and tools",
			"type": "choice",
			"values": ["latest", "3.9", "3.8", "3.7", "3.6"],
			"default": false,
			"buildArg": "PYTHON_VERSION",
			"extensions": [
				"ms-python.python",
				"ms-python.vscode-pylance"
			],
			"containerEnv": {
				"PYTHON_PATH": "/usr/local/python",
				"PIPX_HOME": "/usr/local/py-utils",
				"PIPX_BIN_DIR": "/usr/local/py-utils/bin",
				"PATH":"${PYTHON_PATH}/bin:${PATH}:${PIPX_BIN_DIR}"
			}
		},
		{
			"id": "golang",
			"name": "Go (golang) and related tools",
			"type": "choice",
			"values": ["latest", "1.16", "1.15", "1.14"],
			"default": false,
			"buildArg": "GOLANG_VERSION",
			"extensions": ["golang.Go"],
			"containerEnv": {
				"GOPATH": "/go",
				"GOROOT": "/usr/local/go",
				"PATH": "${GOPATH}/bin:${GOROOT}/bin:${PATH}"
			}
		},
		{
			"id": "java",
			"name": "Java (via SDKMAN!)",
			"type": "choice",
			"values": ["16", "11", "8"],
			"default": false,
			"buildArg": "JAVA_VERSION",
			"extensions": ["vscjava.vscode-java-pack"],
			"containerEnv": {
				"SDKMAN_DIR": "/usr/local/sdkman",
				"PATH": "${SDKMAN_DIR}/bin:${SDKMAN_DIR}/candidates/java/current/bin:${PATH}"
			}
		},
		// Problem #3 - Maven and gradle options should not be presented if Java isn't checked
		{
			"id": "maven",
			"name": "Maven (via SDKMAN!)",
			"type": "choice",
			"values": ["latest", "3.8", "3.6", "3.5"],
			"default": false,
			"buildArg": "MAVEN_VERSION",
			"extensions": ["vscjava.vscode-maven"],
			"containerEnv": {
				"SDKMAN_DIR": "/usr/local/sdkman",
				"PATH": "${SDKMAN_DIR}/bin:${SDKMAN_DIR}/candidates/maven/current/bin:${PATH}"
			}
		},
		{
			"id": "gradle",
			"name": "Gradle (via SDKMAN!)",
			"type": "choice",
			"values": ["latest", "7", "6", "5"],
			"default": false,
			"buildArg": "GRADLE_VERSION",
			"extensions": ["golang.Go"],
			"containerEnv": {
				"SDKMAN_DIR": "/usr/local/sdkman",
				"PATH": "${SDKMAN_DIR}/bin:${SDKMAN_DIR}/candidates/gradle/current/bin:${PATH}"
			}
		},
		{
			"id": "ruby",
			"name": "Ruby (via rvm)",
			"type": "choice",
			"values": ["3.0", "2.7", "2.6"],
			"default": false,
			"buildArg": "RUBY_VERSION",
			"extensions": ["vscjava.vscode-java-pack"],
			"containerEnv": {
				"SDKMAN_DIR": "/usr/local/sdkman",
				"PATH": "${SDKMAN_DIR}/bin:${SDKMAN_DIR}/candidates/java/current/bin:${PATH}"
			}
		},
		{
			"id": "rust",
			"name": "Rust",
			"type": "option",
			"default": false,
			"buildArg": "INSTALL_RUST",
			"extensions": [
				"rust-lang.rust",
				"bungcip.better-toml",
				"vadimcn.vscode-lldb"		
			],
			"containerEnv": {
				"CARGO_HOME": "/usr/local/cargo",
				"RUSTUP_HOME": "/usr/local/rustup",
				"PATH": "${CARGO_HOME}/bin:${RUSTUP_HOME}/bin:${PATH}"
			}
		},
		{
			"id": "powershell",
			"name": "PowerShell",
			"type": "option",
			"default": false,
			"buildArg": "INSTALL_POWERSHELL"
		}
	]
}